<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!-- boardDTO select용 -->
  <!-- board_tbl 게시판 -->
  <mapper namespace="com.km.board.dao.BoardDAO">
  	<resultMap type="com.km.board.model.dto.BoardDTO" id="boardResultMap">
		<id property="boardCode" column="BOARD_CODE"/>
		<result property="name" column="BOARD_NAME"/>
		<result property="locationCode" column="LOCATION_CODE"/>
	</resultMap>
	
	 <!-- post_tbl 게시물 -->
	 <resultMap type="com.km.board.model.dto.PostDTO" id="postResultMap">
		<id property="postNo" column="POST_NO"/>
		<result property="postTitle" column="POST_TITLE"/>
		<result property="postContents" column="POST_CONTENTS"/>
		<result property="postDate" column="POST_DATE"/>
		<result property="cntLike" column="CNT_LIKE"/>
		<result property="cntView" column="CNT_VIEW"/>
		<result property="email" column="EMAIL"/>
		<result property="repostDate" column="REPOST_DATE"/>
		<result property="isDeleted" column="IS_DELETED"/>
		<result property="boardCode" column="BOARD_CODE"/>
	</resultMap>
	
	
	<!-- 포스팅 출력에 사용할 확장판 resultMap -->
	 <resultMap type="com.km.board.model.dto.PostDTO" id="postResultBigMap">
		<id property="postNo" column="POST_NO"/>
		<result property="postTitle" column="POST_TITLE"/>
		<result property="postContents" column="POST_CONTENTS"/>
		<result property="postDate" column="POST_DATE"/>
		<result property="cntLike" column="CNT_LIKE"/>
		<result property="cntView" column="CNT_VIEW"/>
		<result property="email" column="EMAIL"/>
		<result property="repostDate" column="REPOST_DATE"/>
		<result property="isDeleted" column="IS_DELETED"/>
		<result property="boardCode" column="BOARD_CODE"/>
		<!--추가한 부분  -->
		<result property="nickName" column="NICKNAME" />	
		<result property="birthDay" column="BIRTH_DAY" />
		<result property="address" column="MEM_ADDRESS" />
		<result property="gender" column="GENDER" />
		<result property="isBlack" column="IS_BLACK" />
		<result property="cntWarning" column="CNT_WARNING" />
		<result property="likesCode" column="LIKES_CODE" />
		<result property="locationCode" column="LOCATION_CODE" />
		<result property="profilePath" column="PROFILE_PATH" />
		<collection property="postContents" ofType="com.km.member.model.dto.MemberDTO">
		</collection>
		
	</resultMap>
	
	
	
	
	<!-- reply_tbl 리플 -->	
	<resultMap type="com.km.board.model.dto.ReplyDTO" id="replyResultMap">
		<id property="replyNo" column="REPLY_NO"/>
		<result property="writeDate" column="WRITE_DATE"/>
		<result property="email" column="EMAIL"/>
		<result property="replyContents" column="REPLY_CONTENTS"/>
		<result property="postNo" column="POST_NO"/>
		<result property="hoxy" column="HOXY"/>
		<result property="isDeleted" column="IS_DELETED"/>
		<result property="nickName" column="NICKNAME"/>
		
	</resultMap>
	
	<!-- report_post_tbl 신고게시물 -->
	<resultMap type="com.km.board.model.dto.ReportPostDTO" id="reportResultMap">
		<id property="postNo" column="POST_NO"/>
		<result property="report" column="REPORT"/>
		<result property="isAccepted" column="IS_ACCEPTED"/>
		<result property="email" column="EMAIL"/>
	</resultMap>
	

	
	<select id = "selectPost" parameterType = "com.km.common.paging.PageNumberingAndSearching" resultMap ="postResultMap">		
		SELECT
			   @ROWNUM:=@ROWNUM+1	
		     , A.POST_NO
		     , A.POST_TITLE
		     , A.POST_CONTENTS
		     , A.POST_DATE
		     , A.CNT_LIKE
		     , A.CNT_VIEW
		     , A.EMAIL
		     , A.REPOST_DATE
		     , A.IS_DELETED
		     , A.BOARD_CODE
		  FROM post_tbl A
		     , (SELECT @ROWNUM:=0) R
		 WHERE A.BOARD_CODE = #{ boardCode }
		   AND A.IS_DELETED = 'N'
		   AND A.AD_NO = 0
			<if test="searchValue != '' and searchValue != null">
		   AND A.POST_TITLE LIKE CONCAT('%',#{ searchValue},'%')
		   	</if>
		   	<if test="sortValue == null">
			    ORDER BY A.POST_NO DESC
			</if>
			<if test="sortValue == 'postDateASC'">
			    ORDER BY A.POST_DATE ASC
			</if>
			<if test="sortValue == 'postDateDESC'">
			    ORDER BY A.POST_DATE DESC
			</if>
			<if test="sortValue == 'cntLike'">
			    ORDER BY A.CNT_LIKE DESC
			</if>
			<if test="sortValue == 'cntView'">
			    ORDER BY A.CNT_VIEW DESC
			</if>
		 LIMIT #{ startRow }, 10	
		
		</select>

		 
		<select id = "selectPostingPage" resultMap ="postResultBigMap">		
		 	
		SELECT
			   @ROWNUM:=@ROWNUM+1	
		     , A.POST_NO
		     , A.POST_TITLE
		     , A.POST_CONTENTS
		     , A.POST_DATE
		     , A.CNT_LIKE
		     , A.CNT_VIEW
		     , A.EMAIL
		     , A.REPOST_DATE
		     , A.IS_DELETED
		     , A.BOARD_CODE
		     , B.NICKNAME
		  FROM post_tbl A
		     , (SELECT @ROWNUM:=0) R
		  JOIN member_tbl B ON(EMAIL = EMAIL)
		 WHERE A.POST_NO = #{ postNo }
		   AND A.IS_DELETED = 'N'
		 GROUP BY A.POST_NO 

		</select>
	
	<!-- 신고게시물 -->
	<select id = "selectReport" resultMap ="reportResultMap">
		SELECT
			   POST_NO
			 , REPORT
			 , IS_ACCEPTED
			 , EMAIL
		  FROM report_post_tbl	 
	
	</select>
	
	<!-- 페이지 네이션관련 해당 게시물수 측정 -->
	<select id="selectTotalPostNumber" resultType="_int" parameterType="hashmap">
        SELECT 
               COUNT(*)
          FROM post_tbl A
    	<where>
	    	A.BOARD_CODE = #{ boardCode }
	    	AND A.AD_NO = 0
    		<if test="searchValue != '' and searchValue != null">
		   	AND A.POST_TITLE LIKE CONCAT('%',#{ searchValue },'%')
			</if>
			AND A.IS_DELETED = 'N'
    	</where>      
     </select> 
     
     <select id="selectTotalReplyNumber" resultType="_int">
        SELECT 
               COUNT(*)
          FROM reply_tbl A
    	 WHERE A.POST_NO = #{postNo}
		   AND A.IS_DELETED = 'N'
     </select> 
     
      
     
	<!-- 페이지 네이션관련 해당 게시물수 측정 -->
	<select id="selectMatchedTotalNumber" resultType="_int" parameterType="hashmap">
         SELECT
			   count(*)
		FROM   MEMBER_TBL A
		JOIN   likes_tbl B ON B.LIKES_CODE = A.LIKES_CODE 
		JOIN   location_tbl C ON C.LOCATION_CODE = A.LOCATION_CODE
		WHERE  A.LIKES_CODE = #{memberInfo.likesCode}
		 AND   A.LOCATION_CODE = #{memberInfo.locationCode}
		 AND A.EMAIL NOT IN (select BLOCKED_EMAIL from blocked_tbl where EMAIL = #{ memberInfo.email } ) 
		 AND A.EMAIL != #{ memberInfo.email }
		 AND   ceil((TO_DAYS(NOW()) - TO_DAYS(A.BIRTH_DAY)) / 365)
		 BETWEEN (ceil((TO_DAYS(NOW()) - TO_DAYS( #{ memberInfo.birthDay } )) / 365)-5) 
		      AND (ceil((TO_DAYS(NOW()) - TO_DAYS( #{ memberInfo.birthDay } )) / 365)+5)
    		<if test="matchedSearchMap.searchValue != '' and matchedSearchMap.searchValue != null">
		   		AND A.NICKNAME LIKE CONCAT('%',#{ matchedSearchMap.searchValue },'%')
			</if>
			
	</select>
	
     <!-- 나와 비슷한 사람들 -->
	<select id = "selectMatchedFriends" resultType="hashmap">
		SELECT
			   @ROWNUM:=@ROWNUM+1,
			   A.EMAIL,
			   A.NICKNAME,
			   A.PROFILE_PATH,
			   B.LIKES_NAME,
			   C.LOCATION_NAME,
			   ceil((TO_DAYS(NOW()) - TO_DAYS(A.BIRTH_DAY)) / 365) as AGE
		FROM   MEMBER_TBL A
		JOIN   likes_tbl B ON B.LIKES_CODE = A.LIKES_CODE 
		JOIN   location_tbl C ON C.LOCATION_CODE = A.LOCATION_CODE
		WHERE  A.LIKES_CODE = #{memberInfo.likesCode}
		 AND   A.LOCATION_CODE = #{memberInfo.locationCode}
		 AND A.EMAIL NOT IN (select BLOCKED_EMAIL from blocked_tbl where EMAIL = #{ memberInfo.email } ) 
		 AND A.EMAIL != #{ memberInfo.email }
		 AND   ceil((TO_DAYS(NOW()) - TO_DAYS(A.BIRTH_DAY)) / 365)
		 BETWEEN (ceil((TO_DAYS(NOW()) - TO_DAYS( #{ memberInfo.birthDay } )) / 365)-5) 
		     AND (ceil((TO_DAYS(NOW()) - TO_DAYS( #{ memberInfo.birthDay } )) / 365)+5)
		<if test="pageNumberingAndSearching.searchValue != '' and pageNumberingAndSearching.searchValue != null">
		   AND A.NICKNAME LIKE CONCAT('%',#{ pageNumberingAndSearching.searchValue },'%')
		</if>
		<if test="pageNumberingAndSearching.sortValue == 'ageASC'">
		    ORDER BY AGE ASC
		</if>
		<if test="pageNumberingAndSearching.sortValue == 'ageDESC'">
		    ORDER BY AGE DESC
		</if>
		<if test="pageNumberingAndSearching.sortValue == 'nickName'">
		    ORDER BY A.NICKNAME ASC
		</if>
		LIMIT #{ pageNumberingAndSearching.startRow }, 10
	</select>
	
	
     <!-- 조회수 증가 관련 쿼리문 -->
     
     <update id="updateCntView">
     
     	UPDATE post_tbl
     	SET
     		CNT_VIEW = IFNULL(CNT_VIEW,0) +1
      WHERE	POST_NO = #{ postNo }
      	AND IS_DELETED = 'N'
     </update>
     
     <!-- 게시글 삭제  -->
     <update id="postDelete">
     	UPDATE post_tbl
     	   SET IS_DELETED = 'Y' 
         WHERE POST_NO = #{ postNo }
     </update>
	<!-- 스크랩  -->
	 <insert id="postScrapInsert" parameterType="hashmap">
	 INSERT 
		INTO scrap_tbl
	(
	  POST_NO
	, EMAIL         
	)
	VALUES
	(
	  #{ postNo }
	, #{ email }
	)
	 
	 </insert>
	 
	 <!-- 메인보드 쿼리 -->
	 <select id="selectMainBoardList" resultType="hashmap">
 		(SELECT
		       A.POST_TITLE
		     , A.POST_CONTENTS
		     , A.POST_DATE
		     , A.CNT_LIKE
		     , A.CNT_VIEW
		     , B.NICKNAME
		     , A.BOARD_CODE
		  FROM post_tbl A
		  JOIN MEMBER_TBL B ON A.EMAIL = B.EMAIL
		 WHERE A.BOARD_CODE LIKE CONCAT('1_', #{ locationCode })
		   AND A.IS_DELETED = 'N'
		 ORDER BY A.POST_DATE DESC
		 LIMIT 6 )
	  UNION ALL
 		(SELECT
		       A.POST_TITLE
		     , A.POST_CONTENTS
		     , A.POST_DATE
		     , A.CNT_LIKE
		     , A.CNT_VIEW
		     , B.NICKNAME
		     , A.BOARD_CODE
		  FROM post_tbl A
		  JOIN MEMBER_TBL B ON A.EMAIL = B.EMAIL
		 WHERE A.BOARD_CODE LIKE CONCAT('2_', #{ locationCode })
		   AND A.IS_DELETED = 'N'
		    ORDER BY A.POST_DATE DESC
		 LIMIT 3 )
	  UNION ALL
 		(SELECT
		       A.POST_TITLE
		     , A.POST_CONTENTS
		     , A.POST_DATE
		     , A.CNT_LIKE
		     , A.CNT_VIEW
		     , B.NICKNAME
		     , A.BOARD_CODE
		  FROM post_tbl A
		  JOIN MEMBER_TBL B ON A.EMAIL = B.EMAIL
		 WHERE A.BOARD_CODE LIKE CONCAT('3_', #{ locationCode })
		   AND A.IS_DELETED = 'N'
		 ORDER BY A.POST_DATE DESC
		 LIMIT 3 )
 	</select>
 	
 	<!-- 나와 비슷한 사람들 메인버전-->
	<select id = "selectmainMatchedList" parameterType="com.km.member.model.dto.MemberDTO" resultType="hashmap">
		SELECT
			   A.EMAIL,
			   A.NICKNAME,
			   A.PROFILE_PATH,
			   B.LIKES_NAME,
			   C.LOCATION_NAME,
			   ceil((TO_DAYS(NOW()) - TO_DAYS(A.BIRTH_DAY)) / 365) as AGE
		FROM   MEMBER_TBL A
		JOIN   likes_tbl B ON B.LIKES_CODE = A.LIKES_CODE 
		JOIN   location_tbl C ON C.LOCATION_CODE = A.LOCATION_CODE
		WHERE  A.LIKES_CODE = #{likesCode}
		 AND   A.LOCATION_CODE = #{locationCode}
		 AND   ceil((TO_DAYS(NOW()) - TO_DAYS(A.BIRTH_DAY)) / 365)
		 BETWEEN (ceil((TO_DAYS(NOW()) - TO_DAYS( #{ birthDay } )) / 365)-5) 
		      AND (ceil((TO_DAYS(NOW()) - TO_DAYS( #{ birthDay } )) / 365)+5)
		 AND A.EMAIL NOT IN (select BLOCKED_EMAIL from blocked_tbl where EMAIL = #{ email } ) 
		 AND A.EMAIL != #{ email }
		LIMIT 3
	</select>

	 <!-- 게시물 신고  -->
	 <insert id="reportInsert" parameterType="hashmap">
	 INSERT 
		INTO report_post_tbl
	(
	  POST_NO
	, REPORT 
	, EMAIL         
	)
	VALUES
	(
	  #{ postNo }
	, #{ report }
	, #{ email }
	)	 
	 </insert>
	 
	 <!-- 리플입력 -->
	 <insert id="replyInsert" parameterType="hashmap">
	 INSERT 
		INTO reply_tbl
	(
	  REPLY_NO
	, WRITE_DATE
	, POST_NO
	, REPLY_CONTENTS 
	, EMAIL         
	)
	VALUES
	(
	  nextVal('reply_seq')
	, NOW()
	, #{ postNo }
	, #{ writingReply }
	, #{ email }
	)	 
	 </insert>
	 
	 <!-- 리플 출력  -->
	 	<select id = "selectTotalReply" parameterType="com.km.common.paging.PageNumberingAndSearching" resultMap ="replyResultMap">
		SELECT
			   @ROWNUM:=@ROWNUM+1	
			 , A.REPLY_NO
			 , A.WRITE_DATE
			 , A.EMAIL
			 , A.REPLY_CONTENTS
			 , A.POST_NO
			 , A.HOXY
			 , A.IS_DELETED
			 , B.NICKNAME
		  FROM reply_tbl A
		  JOIN member_tbl B on(A.EMAIL=B.EMAIL) 
		     , (SELECT @ROWNUM:=0) R		    	 
		 WHERE POST_NO = #{ postNo }
		   AND IS_DELETED = 'N'
		ORDER BY A.REPLY_NO DESC    
		 LIMIT #{ startRow }, 5
	</select>
	
	 <!-- 리플 삭제 업데이트문 -->
	 <update id="replyDelete" parameterType="hashmap">
     	UPDATE reply_tbl
     	   SET IS_DELETED = 'Y' 
         WHERE EMAIL = #{ email }
           AND REPLY_NO = #{ replyNo }
     </update>
	 
	 <!-- 고객 센터  -->
	<select id="selectNoticeListTotalNumber" resultType="_int" parameterType="hashmap">
        SELECT 
               COUNT(*)
          FROM post_tbl A
    	 WHERE A.BOARD_CODE = '4_L0'
		   AND A.IS_DELETED = 'N'
   		<if test="searchValue != '' and searchValue != null">
	   	   AND A.POST_TITLE LIKE CONCAT('%',#{ searchValue },'%')
		</if>
	</select>
	
	<select id="selectNoticeList" parameterType="com.km.common.paging.PageNumberingAndSearching" resultMap="postResultMap">
		SELECT
			   @ROWNUM:=@ROWNUM+1	
		     , A.POST_NO
		     , A.POST_TITLE
		     , A.POST_CONTENTS
		     , A.POST_DATE
		     , A.CNT_LIKE
		     , A.CNT_VIEW
		     , A.EMAIL
		     , A.REPOST_DATE
		     , A.IS_DELETED
		     , A.BOARD_CODE
		  FROM post_tbl A
		     , (SELECT @ROWNUM:=0) R
		 WHERE A.BOARD_CODE = '4_L0'
		   AND A.IS_DELETED = 'N'
		<if test="searchValue != '' and searchValue != null">
		   AND A.POST_TITLE LIKE CONCAT('%',#{ searchValue },'%')
		</if>
		<if test="sortValue == 'postDateASC'">
		    ORDER BY A.POST_DATE ASC
		</if>
		<if test="sortValue == 'postDateDESC'">
		    ORDER BY A.POST_DATE DESC
		</if>
		<if test="sortValue == 'cntView'">
		    ORDER BY A.CNT_VIEW DESC
		</if>
		LIMIT #{ startRow }, 10
	</select>
	
	 <!-- qna 게시판 -->
	<select id="selectQnaListTotalNumber" resultType="_int" parameterType="hashmap">
        SELECT 
               COUNT(*)
          FROM post_tbl A
    	 WHERE A.BOARD_CODE = '5_L0'
		   AND A.IS_DELETED = 'N'
   		<if test="searchValue != '' and searchValue != null">
	   	   AND A.POST_TITLE LIKE CONCAT('%',#{ searchValue },'%')
		</if>
	</select>
	
	<select id="selectQnaList" parameterType="com.km.common.paging.PageNumberingAndSearching" resultMap="postResultMap">
		SELECT
			   @ROWNUM:=@ROWNUM+1	
		     , A.POST_NO
		     , A.POST_TITLE
		     , A.POST_CONTENTS
		     , A.POST_DATE
		     , A.CNT_LIKE
		     , A.CNT_VIEW
		     , A.EMAIL
		     , A.REPOST_DATE
		     , A.IS_DELETED
		     , A.BOARD_CODE
		  FROM post_tbl A
		     , (SELECT @ROWNUM:=0) R
		 WHERE A.BOARD_CODE = '5_L0'
		   AND A.IS_DELETED = 'N'
		<if test="searchValue != '' and searchValue != null">
		   AND A.POST_TITLE LIKE CONCAT('%',#{ searchValue },'%')
		</if>
		<if test="sortValue == 'postDateASC'">
		    ORDER BY A.POST_DATE ASC
		</if>
		<if test="sortValue == 'postDateDESC'">
		    ORDER BY A.POST_DATE DESC
		</if>
		<if test="sortValue == 'cntView'">
		    ORDER BY A.CNT_VIEW DESC
		</if>
		LIMIT #{ startRow }, 10
	</select>
	
      <!-- 게시물 추천 관련 쿼리문 -->
     
     <update id="updateCntLike">
     
     	UPDATE post_tbl
     	SET
     		CNT_LIKE = IFNULL(CNT_LIKE,0) +1
      WHERE	POST_NO = #{ postNo }
     </update>
     
     <select id="selectUpdatePost" parameterType="_int" resultMap="postResultMap">
		SELECT
			   A.POST_NO
			 , A.POST_TITLE
			 , A.POST_CONTENTS
			 , A.BOARD_CODE
		  FROM post_tbl A  
		 WHERE POST_NO = #{ postNo }
	</select>
     
     <!-- 게시물 입력  -->
     <insert id="insertPost">
     INSERT 
		INTO post_tbl
		(
		  POST_NO
		, POST_TITLE
		, POST_CONTENTS
		, POST_DATE
		, CNT_LIKE
		, CNT_VIEW
		, EMAIL
		, REPOST_DATE
		, IS_DELETED
		, BOARD_CODE
		)
		values
		(
		  nextVal('post_seq')
		, #{ postTitle }
		, #{ postContents}
		, NOW()
		, 0
		, 0
		, #{ email }
		, null
		, 'N'
		, #{boardCode}
		)     
     </insert>
     
     <!-- 게시물 수정 및 최종 수정일자 입력 -->
     
      <update id="updatePost" parameterType="com.km.board.model.dto.PostDTO"> 
     	UPDATE post_tbl
     	<set>
     	<if test="postTitle != null and postTitle != ''">
     	    POST_TITLE = #{ postTitle },
     	</if>
     	<if test="postContents != null and postContents != ''">
     		POST_CONTENTS = #{ postContents },
     	</if> 
     		REPOST_DATE = NOW()
     	</set>
         WHERE POST_NO = #{ postNo }
     </update>
     
     <select id = "selectAdPost" resultType ="hashmap">		
		SELECT
		       A.POST_NO
		     , A.POST_TITLE
		     , A.POST_CONTENTS
		     , A.POST_DATE
		     , A.CNT_LIKE
		     , A.CNT_VIEW
		     , A.EMAIL
		     , A.REPOST_DATE
		     , A.IS_DELETED
		     , A.BOARD_CODE
		     , B.CO_NAME
		  FROM post_tbl A
		  JOIN ad_store_tbl B ON A.EMAIL = B.EMAIL
		 WHERE A.BOARD_CODE = #{ boardCode }
		   AND A.IS_DELETED = 'N'
		   AND A.AD_NO != 0
		 LIMIT 10	
		</select>
</mapper>
	
	
	